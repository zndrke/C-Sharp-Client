<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ITS.Symphony.Core</name>
    </assembly>
    <members>
        <member name="T:ITS.Symphony.Xml.XmlSerializerCache">
            <summary>
            SspMsgMarshaller의 성능 향상을 위해 XmlSerializer 개체 캐시를 수행하는 클래스
            </summary>
        </member>
        <member name="F:ITS.Symphony.Xml.XmlSerializerCache.cache">
            <summary>
            XmlSerializer 개체 캐시를 위한 리스트
            </summary>
        </member>
        <member name="M:ITS.Symphony.Xml.XmlSerializerCache.Create(System.Type,System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            필요한 XmlSerializer 개체를 캐시로부터 얻는다.
            </summary>
            <param name="type">XmlSerializer의 Serialization 대상 개체의 형식</param>
            <param name="root">XML 루트 요소를 나타내는 XmlRootAttribute 개체</param>
            <returns>XmlSerializer 개체</returns>
        </member>
        <member name="T:ITS.Symphony.Net.StateObject">
            <summary>
            비동기 작업에 대한 상태 정보 및 사용자 정의 데이터를 저장하는 클래스
            </summary>
        </member>
        <member name="F:ITS.Symphony.Net.StateObject.BUFFER_SIZE">
            <summary>
            수신 버퍼 크기
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.StateObject.#ctor(System.Net.Sockets.Socket)">
            <summary>
            생성자.
            </summary>
            <param name="workSocket">소켓 개체</param>
        </member>
        <member name="P:ITS.Symphony.Net.StateObject.WorkSocket">
            <summary>
            소켓 개체
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.StateObject.Buffer">
            <summary>
            수신 버퍼
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.StateObject.BufferSize">
            <summary>
            수신 버퍼 크기
            </summary>
        </member>
        <member name="T:ITS.Symphony.Diagnostics.FileLogHelper">
            <summary>
            파일에 로그 기록을 수행하는 클래스
            </summary>
        </member>
        <member name="M:ITS.Symphony.Diagnostics.FileLogHelper.#cctor">
            <summary>
            정적 생성자.
            </summary>
        </member>
        <member name="F:ITS.Symphony.Diagnostics.FileLogHelper.logDirectory">
            <summary>
            로그 파일이 생성될 로그 디렉토리 경로
            </summary>
        </member>
        <member name="M:ITS.Symphony.Diagnostics.FileLogHelper.WriteError(System.Exception)">
            <summary>
            로그 파일에 발생한 Exception을 기록한다.
            </summary>
            <param name="ex">Exception 개체</param>
        </member>
        <member name="M:ITS.Symphony.Diagnostics.FileLogHelper.WriteSsp(System.Boolean,System.Boolean,System.String)">
            <summary>
            로그 파일에 SSP 송수신 데이터를 기록한다.
            </summary>
            <param name="isSendMsg">송수신 여부 ( true:송신, false:수신 )</param>
            <param name="isClientTimeout">클라이언트 UI 타임아웃 여부</param>
            <param name="rawStream">송수신 데이터 전체 문자열</param>
        </member>
        <member name="M:ITS.Symphony.Diagnostics.FileLogHelper.Write(ITS.Symphony.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
        </member>
        <member name="P:ITS.Symphony.Diagnostics.FileLogHelper.BaseLogLevel">
            <summary>
            로그 메시지의 필터링을 위해 사용되는 기본 로그 레벨
            </summary>
        </member>
        <member name="T:ITS.Symphony.Diagnostics.LogLevel">
            <summary>
            로그 레벨을 정의하는 열거형
            </summary>
        </member>
        <member name="F:ITS.Symphony.Diagnostics.LogLevel.Information">
            <summary>
            정보
            </summary>
        </member>
        <member name="F:ITS.Symphony.Diagnostics.LogLevel.Warning">
            <summary>
            경고
            </summary>
        </member>
        <member name="F:ITS.Symphony.Diagnostics.LogLevel.Error">
            <summary>
            오류
            </summary>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketBase">
            <summary>
            비동기 소켓 통신을 위한 Base 클래스
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketBase.#ctor">
            <summary>
            기본 생성자.
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketBase.#ctor(System.UInt32)">
            <summary>
            생성자.
            </summary>
            <param name="id">ID</param>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketBase.OnConnected(ITS.Symphony.Net.AsyncSocketConnectionEventArgs)">
            <summary>
            Connected 이벤트를 발생시킨다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketBase.OnDisconnected(ITS.Symphony.Net.AsyncSocketConnectionEventArgs)">
            <summary>
            Disconnected 이벤트를 발생시킨다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketBase.OnSent(ITS.Symphony.Net.AsyncSocketSendEventArgs)">
            <summary>
            Sent 이벤트를 발생시킨다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketBase.OnReceived(ITS.Symphony.Net.AsyncSocketReceiveEventArgs)">
            <summary>
            Received 이벤트를 발생시킨다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketBase.OnErrorOccured(ITS.Symphony.Net.AsyncSocketErrorEventArgs)">
            <summary>
            ErrorOccured 이벤트를 발생시킨다.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketBase.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="E:ITS.Symphony.Net.AsyncSocketBase.Connected">
            <summary>
            비동기 소켓에서 연결 완료했을 때 발생하는 이벤트
            </summary>
        </member>
        <member name="E:ITS.Symphony.Net.AsyncSocketBase.Disconnected">
            <summary>
            비동기 소켓에서 연결 종료했을 때 발생하는 이벤트
            </summary>
        </member>
        <member name="E:ITS.Symphony.Net.AsyncSocketBase.Sent">
            <summary>
            비동기 소켓에서 데이터 송신했을 때 발생하는 이벤트
            </summary>
        </member>
        <member name="E:ITS.Symphony.Net.AsyncSocketBase.Received">
            <summary>
            비동기 소켓에서 데이터 수신했을 때 발생하는 이벤트
            </summary>
        </member>
        <member name="E:ITS.Symphony.Net.AsyncSocketBase.ErrorOccured">
            <summary>
            비동기 소켓에서 오류 발생했을 때 발생하는 이벤트
            </summary>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketConnectEventHandler">
            <summary>
            비동기 소켓의 연결 이벤트를 처리할 메서드를 나타낸다.
            </summary>
            <param name="sender">이벤트 소스</param>
            <param name="e">이벤트 데이터가 들어 있는 AsyncSocketConnectionEventArgs 개체</param>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketDisconnectEventHandler">
            <summary>
            비동기 소켓의 연결 해제 이벤트를 처리할 메서드를 나타낸다.
            </summary>
            <param name="sender">이벤트 소스</param>
            <param name="e">이벤트 데이터가 들어 있는 AsyncSocketConnectionEventArgs 개체</param>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketConnectionEventArgs">
            <summary>
            비동기 소켓의 연결 관련 이벤트에 대한 데이터를 제공하는 클래스
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketConnectionEventArgs.#ctor(System.UInt32)">
            <summary>
            생성자.
            </summary>
            <param name="id">ID</param>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketConnectionEventArgs.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketSendEventHandler">
            <summary>
            비동기 소켓의 데이터 송신 이벤트를 처리할 메서드를 나타낸다.
            </summary>
            <param name="sender">이벤트 소스</param>
            <param name="e">이벤트 데이터가 들어 있는 AsyncSocketSendEventArgs 개체</param>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketSendEventArgs">
            <summary>
            비동기 소켓의 데이터 송신 이벤트에 대한 데이터를 제공하는 클래스
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketSendEventArgs.#ctor(System.UInt32,System.Int32)">
            <summary>
            생성자.
            </summary>
            <param name="id">ID</param>
            <param name="sendBytes">송신 바이트 수</param>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketSendEventArgs.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketSendEventArgs.SendBytes">
            <summary>
            송신 바이트 수
            </summary>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketReceiveEventHandler">
            <summary>
            비동기 소켓의 데이터 수신 이벤트를 처리할 메서드를 나타낸다.
            </summary>
            <param name="sender">이벤트 소스</param>
            <param name="e">이벤트 데이터가 들어 있는 AsyncSocketReceiveEventArgs 개체</param>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketReceiveEventArgs">
            <summary>
            비동기 소켓의 데이터 수신 이벤트에 대한 데이터를 제공하는 클래스
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketReceiveEventArgs.#ctor(System.UInt32,System.Int32,System.Byte[],ITS.Symphony.Net.SspHeader)">
            <summary>
            생성자.
            </summary>
            <param name="id">ID</param>
            <param name="receiveBytes">수신 바이트 수</param>
            <param name="receiveData">수신 데이터</param>
            <param name="header">Response SSP Header</param>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketReceiveEventArgs.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketReceiveEventArgs.ReceiveBytes">
            <summary>
            수신 바이트 수
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketReceiveEventArgs.ReceiveData">
            <summary>
            수신 데이터
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketReceiveEventArgs.Header">
            <summary>
            Response SSP Header
            </summary>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketErrorEventHandler">
            <summary>
            비동기 소켓의 오류 처리 이벤트를 처리할 메서드를 나타낸다.
            </summary>
            <param name="sender">이벤트 소스</param>
            <param name="e">이벤트 데이터가 들어 있는 AsyncSocketErrorEventArgs 개체</param>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketErrorEventArgs">
            <summary>
            비동기 소켓의 오류 처리 이벤트에 대한 데이터를 제공하는 클래스
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketErrorEventArgs.#ctor(System.UInt32,System.Exception)">
            <summary>
            생성자.
            </summary>
            <param name="id">ID</param>
            <param name="exception">Exception 개체</param>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketErrorEventArgs.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketErrorEventArgs.Exception">
            <summary>
            Exception 개체
            </summary>
        </member>
        <member name="T:ITS.Symphony.IO.ExcelReader">
            <summary>
            Excel Data 를 읽는 클래스
            </summary>
            <remarks>
            Excel Sheet의 첫번째 행을 컬럼 Header로 인식 한다.
            </remarks>
        </member>
        <member name="M:ITS.Symphony.IO.ExcelReader.#ctor(System.String,System.Boolean)">
            <summary>
            생성자.
            </summary>
            <param name="excelFilePath">Excel 파일의 전체 경로
            <param name="isHDR">첫번째 행이 컬럼명을 포함하는지 여부</param>
            <remarks>절대 경로 혹은 Url 경로 불가</remarks>
            </param>
        </member>
        <member name="M:ITS.Symphony.IO.ExcelReader.Dispose">
            <summary>
            Dispose 패턴<br/>
            Connection 객체 Dispose
            </summary>
        </member>
        <member name="M:ITS.Symphony.IO.ExcelReader.GetSheetList">
            <summary>
            Excel Sheet 목록을 반환한다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ITS.Symphony.IO.ExcelReader.CreateConnection">
            <summary>
            OleDbConnection 개체를 생성한다.
            </summary>
            <returns>OleDbConnection 개체</returns>
        </member>
        <member name="M:ITS.Symphony.IO.ExcelReader.GetExcelDataSet(System.Int32[],System.Int32[])">
            <summary>
            Excel Sheet Index 목록에 해당하는 데이터를 반환한다.
            </summary>
            <param name="sheetIndexs">Sheet Index 목록</param>
            <param name="skipRowsPerSheet">제외열 목록</param>
            <returns></returns>
        </member>
        <member name="M:ITS.Symphony.IO.ExcelReader.GetExcelDataSet(System.String[],System.Int32[])">
            <summary>
            Sheet 명 목록에 해당하는 데이터를 반환
            </summary>
            <param name="sheetNames">Sheet 명 목록</param>
            <param name="skipRowsPerSheet">제외열 목록</param>
            <remarks>
            DataSet 내의 DataTable이 없는 경우 sheetNames의 항목이 없을 수 있음.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:ITS.Symphony.IO.ExcelReader.GetExcelDataTable(System.String,System.Int32)">
            <summary>
            Sheet 명 해당하는 데이터를 반환
            </summary>
            <param name="sheetName">Sheet 명</param>
            <param name="skipRowPerSheet">제외열</param>
            <returns><remarks>DataTable 'null' 값 체크</remarks></returns>
        </member>
        <member name="M:ITS.Symphony.IO.ExcelReader.GetExcelDataTable(System.Int32,System.Int32)">
            <summary>
            Excel Sheet Index 해당하는 데이터를 반환
            </summary>
            <param name="sheetIndex">Sheet Index</param>
            <param name="skipRowPerSheet">제외열</param>
            <returns><remarks>DataTable 'null' 값 체크</remarks></returns>
        </member>
        <member name="M:ITS.Symphony.IO.ExcelReader.GetSheetName(System.Int32)">
            <summary>
            Sheet Index에 해당하는 Sheet 명을 반환
            </summary>
            <param name="sheetIndex">Sheet Index</param>
            <returns></returns>
        </member>
        <member name="T:ITS.Symphony.Xml.SspMsgMarshaller">
            <summary>
            SSP(Symphony Ⅱ Service Protocol)의 Message Dictionary를 위한 XML, Entity 상호 변환을 수행하는 클래스
            </summary>
        </member>
        <member name="F:ITS.Symphony.Xml.SspMsgMarshaller.xmlArrayList">
            <summary>
            XmlArray, XmlArrayItem 등의 요소에 대한 정보를 담는 리스트
            </summary>
        </member>
        <member name="M:ITS.Symphony.Xml.SspMsgMarshaller.CopyEntity``1(``0)">
            <summary>
            지정된 제네릭 개체 형식의 인스턴스에 대한 복사본 인스턴스을 반환한다.
            </summary>
            <typeparam name="TMsg">제네릭 개체 형식</typeparam>
            <param name="msgEntity">제네릭 개체 형식의 인스턴스</param>
            <returns>제네릭 개체 형식의 복사본 인스턴스</returns>
        </member>
        <member name="M:ITS.Symphony.Xml.SspMsgMarshaller.GetMsgEntityForXml(System.String,System.Type)">
            <summary>
            지정된 Message XML 문자열에 대한 Message Entity 개체의 인스턴스를 구성하여 반환한다.
            </summary>
            <param name="msgXml">Message XML 문자열</param>
            <param name="msgType">Message Entity의 Type</param>
            <returns>Object 개체</returns>
        </member>
        <member name="M:ITS.Symphony.Xml.SspMsgMarshaller.GetMsgXmlForEntity``1(``0)">
            <summary>
            지정된 제네릭 개체 형식의 인스턴스에 대한 Message XML 문자열을 구성하여 반환한다.
            </summary>
            <typeparam name="TMsg">제네릭 개체 형식</typeparam>
            <param name="msgEntity">제네릭 개체 형식의 인스턴스</param>
            <returns>Message XML 문자열</returns>
        </member>
        <member name="M:ITS.Symphony.Xml.SspMsgMarshaller.GetPropertyValue``1(``0,System.String)">
            <summary>
            지정된 제네릭 개체 형식의 지정된 속성 값을 반환한다.
            </summary>
            <typeparam name="TMsg">제네릭 개체 형식</typeparam>
            <param name="msgEntity">제네릭 개체 형식의 인스턴스</param>
            <param name="name">속성 명</param>
            <returns>속성 값</returns>
        </member>
        <member name="M:ITS.Symphony.Xml.SspMsgMarshaller.SearchXmlArray(System.Type,System.Boolean)">
            <summary>
            Type에 포함된 XmlArray 요소 정보를 검색한다.
            </summary>
            <param name="t">Type 개체</param>
            <param name="isSerialize">Serialize 동작인지 Deserialize 동작인지 여부를 나타내는 값</param>
        </member>
        <member name="M:ITS.Symphony.Xml.SspMsgMarshaller.InsertArrayElement(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            XML 문서에 대해 Array 요소를 추가한다.
            </summary>
            <param name="doc">XmlDocument 개체</param>
            <param name="parentNode">XmlNodeList 개체</param>
        </member>
        <member name="T:ITS.Symphony.Net.AsyncSocketClient">
            <summary>
            비동기 소켓 통신을 위한 클라이언트 클래스
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.#ctor">
            <summary>
            기본 생성자.
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.#ctor(System.UInt32)">
            <summary>
            생성자.
            </summary>
            <param name="id">ID</param>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.#ctor(System.UInt32,System.Net.Sockets.Socket)">
            <summary>
            생성자.
            </summary>
            <param name="id">ID</param>
            <param name="connectionSocket">연결 소켓</param>
        </member>
        <member name="F:ITS.Symphony.Net.AsyncSocketClient.receiveData">
            <summary>
            수신 데이터
            </summary>
        </member>
        <member name="F:ITS.Symphony.Net.AsyncSocketClient.sendHeader">
            <summary>
            SSP(Symphony Ⅱ Service Protocol) Send Header
            </summary>
        </member>
        <member name="F:ITS.Symphony.Net.AsyncSocketClient.receiveHeader">
            <summary>
            SSP(Symphony Ⅱ Service Protocol) Receive Header
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.Connect(System.String,System.Int32)">
            <summary>
            원격 호스트 연결을 처리한다.
            </summary>
            <param name="hostAddress">원격 호스트 IP 주소</param>
            <param name="port">포트 번호</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.ConnectCallback(System.IAsyncResult)">
            <summary>
            원격 호스트 연결 비동기 콜백 메서드
            </summary>
            <param name="ar">비동기 작업의 상태를 나타낸다.</param>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.Send(System.Byte[])">
            <summary>
            데이터 송신을 처리한다.
            </summary>
            <param name="buffer">송신 버퍼</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.SendCallback(System.IAsyncResult)">
            <summary>
            데이터 송신 비동기 콜백 메서드
            </summary>
            <param name="ar">비동기 작업의 상태를 나타낸다.</param>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.Receive">
            <summary>
            데이터 수신을 처리한다.
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.ReceiveCallback(System.IAsyncResult)">
            <summary>
            데이터 수신 비동기 콜백 메서드
            </summary>
            <param name="ar">비동기 작업의 상태를 나타낸다.</param>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.Disconnect">
            <summary>
            원격 호스트 연결 해제를 처리한다.
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.AsyncSocketClient.DisconnectCallback(System.IAsyncResult)">
            <summary>
            원격 호스트 연결 해제 비동기 콜백 메서드
            </summary>
            <param name="ar">비동기 작업의 상태를 나타낸다.</param>
        </member>
        <member name="P:ITS.Symphony.Net.AsyncSocketClient.ConnectionSocket">
            <summary>
            연결 소켓
            </summary>
        </member>
        <member name="T:ITS.Symphony.Net.SspHeader">
            <summary>
            SSP(Symphony Ⅱ Service Protocol)의 Header를 정의하는 클래스
            </summary>
            <remarks>Total Size 128 byte</remarks>
        </member>
        <member name="F:ITS.Symphony.Net.SspHeader.TOTAL_HEADER_SIZE">
            <summary>
            Header 전체 byte 크기
            </summary>
        </member>
        <member name="M:ITS.Symphony.Net.SspHeader.GetSspHeader(System.Byte[])">
            <summary>
            수신 데이터에 대한 SSP Header를 얻는다.
            </summary>
            <param name="buffer">수신 데이터에 대한 바이트 배열</param>
            <returns>SspHeader 개체</returns>
        </member>
        <member name="M:ITS.Symphony.Net.SspHeader.ToString">
            <summary>
            SSP Header를 문자열로 변환합니다.
            </summary>
            <returns>Header 문자열</returns>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.BeginString">
            <summary>
            Protocol 이름 및 버전, 12 byte
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.TotalLen">
            <summary>
            Header size + XML Body size, '%010d'
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.SvcNum">
            <summary>
            Service number, '%04d'
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.MsgNum">
            <summary>
            XML Body에 포함된 Message number, '%04d'
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.SeqNum">
            <summary>
            Sequence number, '%010d'
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.SendTime">
            <summary>
            전송시간, 'YYYYMMDD-HHMISS', 15 byte
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.UserId">
            <summary>
            SYMPHONY Ⅱ 사용자 ID, 20 byte
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.SessKey">
            <summary>
            SYMPHONY Ⅱ에 login 했을 때 서버가 발행한 session key 값, 13 byte
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.ZipYN">
            <summary>
            XML Body가 zlib로 압축 되었는지 여부, 1 byte
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.OrgDataSize">
            <summary>
            압축되기 전의 XML Body data size, 10 byte
            </summary>
        </member>
        <member name="P:ITS.Symphony.Net.SspHeader.ClientArea">
            <summary>
            Client가 응답 메시지 구분을 위해 사용하는 영역, 8 byte
            </summary>
        </member>
        <member name="T:ITS.Symphony.Configuration.CustomizationHelper">
            <summary>
            클라이언트 PC에 시스템 데이터의 저장, 로드 등을 수행하는 클래스
            </summary>
        </member>
        <member name="M:ITS.Symphony.Configuration.CustomizationHelper.Save``1(``0,System.Type)">
            <summary>
            클라이언트 PC에 대상 개체를 데이터로 저장한다.
            </summary>
            <typeparam name="T">제네릭 개체 형식</typeparam>
            <param name="target">제네릭 개체 형식의 인스턴스</param>
            <param name="targetType">대상 개체의 Type</param>
        </member>
        <member name="M:ITS.Symphony.Configuration.CustomizationHelper.Load``1(System.Type)">
            <summary>
            클라이언트 PC에 저장된 데이터를 로드한다.
            </summary>
            <typeparam name="T">제네릭 개체 형식</typeparam>
            <param name="targetType">대상 개체의 Type</param>
            <returns>제네릭 개체 형식의 인스턴스</returns>
        </member>
    </members>
</doc>

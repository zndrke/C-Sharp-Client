1. 바인딩
	1) 의미 및 목적
	- Xaml로 표현되는 UI요소와 데이터 사이에 관계를 맺는 기술
	- UI부분과 데이터 부분을 서로 독립적으로 다룰 수 있게 됨
	- 데이터 추출, 표현, 관리를 용이하게함

	2) 데이터 바인딩 구조
	- Source 객체, Source 속성
	- 바인딩 개체
	- Target 객체, Target 속성

	3) 바인딩 방식
	- OneWay : 소스에서 타겟 방향으로만 바인딩을 제공
		source = txt1
		target = txt2 일 때,
		txt1을 수정하면 txt2에 반영되지만, txt2를 수정해도 txt1은 변경되지 않는다 
		디폴트로 사용됨

	- TwoWay : 소스와 타겟 양방향 바인딩을 제공

	- OneWaytoSource : OneWay 방식과 반대로 동작 
		타겟을 수정하면 소스에 반영됨

	- OneTime : 최초 바인딩 소스 값이 타겟 속성 값을 초기화하지만 이후 반영되지 않음	
	
	4) UpdateSourceTrigger
		- LostFocus : UI요소가 포커스를 잃었을 때 바인딩 소스를 업데이트
	
		- PropertyChanged : UI요소의 바인딩된 속성값이 변경될 때 소스를 업데이트

		- Explicit 	: 명시적으로 UpdateSource를 호출할때
			

2. 컨버터
	- 서로 다른 데이터 타입의 데이터 바인딩을 처리하기 위한 IValueConverter
	1) Convert 메소드 : 소스의 데이터 타입을 타겟 속성 데이터 타입으로 변환

	2) ConvertBack 메소드: 타깃의 데이터 타입을 소스의 데이터 타입으로 변환

	- 실제 값은 변하지 않는다!


3. 추상클래스
	- 구현 코드를 가지지 않는 메소드
	- 파라미터와 리턴타입을 가지지만 본체를 가지지 않음
	- ex) public abstract int Sound(int a , String b);
	
	- 자식 클래스에서 메소드를 오버라이드 해서 사용
	- 반드시 필요한 메소드를 타입에 맞게 재정의 할 것을 강제하는 역할

4. 인터페이스
	- 메소드의 목록만을 가지는 타입
	- 다른 인터페이스나 클래스의 부모로만 사용되어 메소드를 물려주는 역할
	- 인터페이스 내의 메소드의 구체적인 동작을 모두 구현해야 객체를 생성할 수 있는 클래스가 됨
	- 인터페이스의 메소드는 전부 추상메소드
	
	지정자 interface 이름 : 기반인터페이스
	{
		//메소드 목록
	}

5. 델리게이트
	- 메소드를 가리키는 참조형으로 함수 포인터에 대응되는 타입
	- 메소드의 주소를 저장하거나, 다른 메소드의 파라미터로 메소드 자체를 전달하고 싶을 때 사용

	지정자 delegate 리턴타입 이름(파라미터)
	delegate void deleA(int a, double b, String c);

	- 콜백메소드를 구현할 때 델리게이트가 사용됨
	- 콜백메소드 : A메소드를 호출할 때 B메소드를 넘겨주어 A메소드로 하여금 B메소드를 호출하도록 하는 것
		이 때 ,A메소드를 콜백 메소드라고 함
		델리게이트는 B메소드를 참조하는 변수로써 A메소드로 넘겨지는 매개변수가 되고,
		A메소드는 매개변수로 받은 델리게이트로 B메소드를 호출한다.


	namespace Cs_lecture
	{
	    delegate int MyDelegate(int a, int b);

	    class MainApp	
	    {
        		//계산기 함수
        		public static void Calculator (int a, int b, MyDelegate dele)
        		{
        		    Console.Write(dele(a,b));
        		}

	        	public static int plus (int a, int b) { return a + b; }	
	        	public static int minus (int a, int b) { return a - b; }
        		public static int multiply (int a, int b) { return a * b; }

	        	static void Main (String[] args)
        		{
            		MyDelegate Plus = new MyDelegate(plus);
            		MyDelegate Minus = new MyDelegate(minus);
            		MyDelegate Multiply = new MyDelegate(multiply);

	            	Calculator(11, 22, Plus);
            		Calculator(33, 22, Minus);
            		Calculator(11, 22, Multiply);
	        	}	
	      }
	}

6. 루트클래스
	- 가장 기본이 되는 클래스, 모든 클래스는 암시적으로 object를 상속받음
	
	-object 클래스의 객체들이 가지는 메소드
	1) ToString	: 객체를 문자열 형태로 표현
	2) GetType 	: 객체의 타입 정보를 제공하는 System.Type 객체를 리턴
	3) MemberwiseClone : 객체 멤버끼리 1:1 복사, 얕은 복사
	4) GetHashCode	: 객체를 검색하기 위한 해시값을 리턴
	5) Equals		: 두 객체를 비교하여 같은 값인지 판별, 널 객체와도 비교할 수 있음
	6) ReferenceEquals	: 객체가 같은 대상을 가리키고 있는지 비교
	7) Finalize 또는 ~Object : 정리 작업을 수행하는 파괴자, 클래스 앞에 ~를 붙인다.
	
7. String 
	- 문자열을 표현하기 위한 별도의 클래스로 라이브러리 차원의 문자열 타입을 지원함

	1) Insert 		: 지정한 위치에 문자열을 삽입
	2) Remove 	: 지정한 범위의 문자를 삭제
	3) Replace 	: 지정한 문자를 다른 문자로 대체
	4) Compare 	: 문자열 객체끼리 비교. 대소문자, 언어정보 등을 지정하여 비교
	5) IndexOf 	: 문자 또는 부분 문자열을 검색하여 그 인덱스를 리턴, 없으면 -1리턴
	6) InderOfAny 	: 주어진 문자 집합 중 최초로 검색되는 위치를 검색하여 인덱스를 리턴
	7) LastIndexOf	: IndexOf와 같되, 역검색
	8) LastIndexOfAny	: IndexOfAny와 같되, 역검색
	9) Contains	: 부분 문자열이 있는지를 조사
	10) SubString	: 지정한 위치부터 끝가지 부분 문자열을 만들어 리턴
	11) Trim 		: 앞뒤의 불필요한 공백문자 제거
	12) TrimStart 	: 문자열 앞쪽에 있는 지정한 문자들을 제거
	13) TrimEnd	: 문자열 뒤쪽에 있는 지정한 문자들을 제거
	14) ToLower	: 소문자로 변환한 문자열을 리턴
	15) ToUpper	: 대문자로 변환한 문자열을 리턴
	16) PadLeft	: 지정한 폭으로 늘리고 왼쪽에 공백을 삽입
	17) PadRight	: 지정한 폭으로 늘리고 오른쪽에 공백을 삽입
	18) Split		: 문자열을 특정 문자를 기준으로 한 부분 문자열 배열로 나눔
	19) Format	: 서식을 조립 	

	- 문자열 객체 자체를 변경하는 것이 아니라 힙에 새로운 문자열을 만들어서 리턴
	- String 객체의 메소드는 모두 읽기전용!
	- 문자열을 빈번하게 수정할 때는 StringBuilder 클래스 사용

8. 컬렉션 
	- 변수들의 조직적인 집합. 변수를 담는 통이라고 하여 컨테이너라고도 함

	1) Array
	- 가장 기본적인 컬렉션. 빠르고 효율이 좋다.
	- 생성할 때 크기를 지정하면 변경할 수 없는 단점이 있다.

	2) ArrayList
	- 실행중에 크기를 확장, 축소할 수 있는 동적 배열
	- 현재 저장되어 있는 요소의 개수인 Count, 할당된 총량인 Capacity를 프로퍼티로 가짐
	- 인덱서가 있어서 배열처럼 [i]로 읽을 수 있다. 단, 새로운 요소를 추가하지는 못함
	- 추가, 삭제는 메소드를 통해서 가능함
	- Array와 ArrayList는 구조가 달라 ArrayList를 Array에 복사하기 위해서는 ToArray메소드를 이용해야 함

	3) HashTable
	- key와 value를 쌍으로 저장하는 자료구조. 검색속도가 O(1)으로 매우 빠르다
	- Add(Object key, Object value)
	- Remove(Object key)
	- Count 프로퍼티는 해시에 저장된 총 개수를 의미함

	4) Stack
	- 후입 선출
	- Push, Pop, Peek 

	5) Queue
	- 선입 선출
	- Enqueue, Dequeue

9. 유틸리티 클래스
	- 자주 사용될 만한 실용적인 클래스를 정의한 것

	1) DateTime
	- 날짜와 시간을 표현
	
	2) Math
	- 수식을 다루는 클래스
	- ex) min, max, abs, log, pow

10. 암묵적 타입
	- var
	- 변수를 선언할 때 명시적으로 타입을 밝히지 않고 초기식을 보고 컴파일러가 추론함.
	- 타입을 지정하지 않았을 뿐이지 한번 결정된 타입을 다른 타입으로 쓰는건 불가능

	int arr= {1,2,3,4,5};
	foreach( var n in arr)
	{
		Console.WriteLine(n);
	}
	- 만약 arr의 요소가 int가 아닌 제네릭과 같은 복잡한 요소일 경우 var를 쓰는 것이 좋음

11. 익명 타입
	- 객체 하나만을 위해 클래스를 선언하는 것은 낭비이므로 타입정의와 객체생성을 한번에 함
	- var 객체 = new {p1 = v1, p2 = v2}
	- 익명타입의 객체는 타입명이 없기 때문에 반드시 var로 선언함
	
	static void Main()
	{
	var Lee = new{Name = "이순신" ,Age = 32}
	Console.WriteLine("이름: "+ Lee.Name + "나이: " + Lee.Age);
	}

12. 확장 메소드
	- 기존의 클래스를 유지한 채로 메소드를 추가할 수 있음
	- 구입한 라이브러리처럼 접근이 불가능한 경우 사용
	- 가능하면 상속이라는 좋은 방법이 있으니 상속을 받도록 하자

	public class Integer
 	   {
  	      public int a;
  	      public Integer(int aa){a=aa;}
  	      public int Add(int b){return a+b;}
   	     public int Mul(int b){return a*b;}
  	  }

   	 public static class IntegerExt	//확장메소드
  	  {
   	     public static int Sub(this Integer I,int b)
   	     {
   	         return I.a - b;
  	      }
  	  }

  	  class Program
 	   {
 	       static void Main ()
  	      {
     	       Integer Num = new Integer(3);
    	        Console.WriteLine("덧셈 : " + Num.Add(2));
    	        Console.WriteLine("곱셈 : " + Num.Mul(2));
    	        Console.WriteLine("뺄셈 : " + Num.Sub(2));
   	     }
  	  }
	
13. 람다 표현식
	- 여러가지 면에서 익명 메소드와 유사하나 세가지 측면에서 우위에 있음
	1) 파라미터 타입을 생략할 수 있음. 생략된 타입은 델리게이트를 따른다
	2) 본체에 명령문 뿐만아니라 표현식도 쓸 수 있어 더 짧다
	3) 표현식 트리로 변환될 수 있다.
	
	- 코드가 짧아야하는 쿼리표현식에서 사용됨

	- 형식 : (파라미터) => 표현식 또는 명령문
	- ex) a => a+1
	- a가 a+1이 된다 로 해석

14. 쿼리 표현식
	- LINQ(Language INtegreted Quary)

	- from 순회변수 in 데이터소스
 	- where 조건식
	- orderby 기준변수 (ascending/descending)
	- select 결과변수

	int[] numbers = { 1, 3, 4, 6, 5, 9, 8, 12, 15, 18, 17, 11, 22 }; 

	var data = 	from num in numbers 
			where num < 10 && num % 2 == 0 
			orderby num 
			select num;

	foreach (var i in data) 
		Console.Write("{0} ", i);

출처: https://blog.hexabrain.net/262 [끝나지 않는 프로그래밍 일기]


15. 멀티스레드
	- 스레드란 코드의 실행 흐름. 보통 메인에서 시작하는 하나의 흐름을 가지고 이러한 흐름을 싱글스레드라고 함
	- 두개 이상의 스레드를 실행하면 작업을 병렬적으로 처리할 수 있음
	- ex) 백그라운드 작업, 시간이 오래 걸리는 계산작업, 인쇄를 위한 스풀링 등
	- 위 작업을 처리하면서 주 스레드에서는 사용자의 입력을 받아 처리할 수 있음

	public partial class MainWindow 
	        {
	            //작업 스레드
	            static void ThreadProc ()
	            {
	                for (int i = 0; i < 10; i++) {
	                    Console.WriteLine(i);
	                    Thread.Sleep(500);
	                }
	                Console.WriteLine("작업 스레드 종료:");
	            }
	            //주 스레드
	            static void Main()
	            {
	                Thread T = new Thread(new ThreadStart(ThreadProc));
	                T.Start();
	                for (; ; ) {
	                    ConsoleKeyInfo cki;
	                    cki = Console.ReadKey();
	                    if (cki.Key == ConsoleKey.A) {
	                        Console.Beep();
	                    }
	                    if (cki.Key == ConsoleKey.B) {
 	                       break;
 	                   }
 	               }
 	               Console.WriteLine("주 스레드 종료");
 	           }
  	      }

	- 멀테 스레드의 가장 큰 장점은 병렬로 처리할 수 있는 점
	- 멀티 스레드로 작성한다고 속도에 이점이 크지는 않음
	- 멀티 스레드로 작성할 때 경쟁상태(Race Condition)을 피하기 위해 동기화가 필요
	- 동기화 할 때 DeadLock 상황을 피하는 방법을 고려해야 함
 
16. 프로세스
	- 실행중인 응용프로그램
	- 하나의 프로그램이 여러 프로세스가 될 수 있음







